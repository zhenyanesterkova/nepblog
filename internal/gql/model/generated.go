// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type CommentResolvingResult interface {
	IsCommentResolvingResult()
}

type PostFetchResult interface {
	IsPostFetchResult()
}

type ProblemInterface interface {
	IsProblemInterface()
	GetMessage() string
}

type TotalCountResolvingResult interface {
	IsTotalCountResolvingResult()
}

type Comment struct {
	PostID        uuid.UUID              `json:"postID"`
	UserID        uuid.UUID              `json:"userID"`
	CreatedAt     time.Time              `json:"createdAt"`
	Data          string                 `json:"data"`
	ID            uuid.UUID              `json:"id"`
	ChildComments CommentResolvingResult `json:"childComments,omitempty"`
	ParentID      *uuid.UUID             `json:"parentID,omitempty"`
}

type CommentList struct {
	Items []*Comment `json:"items,omitempty"`
}

func (CommentList) IsCommentResolvingResult() {}

type CommentNotFoundProblem struct {
	Message string `json:"message"`
}

func (CommentNotFoundProblem) IsProblemInterface()     {}
func (this CommentNotFoundProblem) GetMessage() string { return this.Message }

type InternalErrorProblem struct {
	Message string `json:"message"`
}

func (InternalErrorProblem) IsCommentResolvingResult() {}

func (InternalErrorProblem) IsPostFetchResult() {}

func (InternalErrorProblem) IsProblemInterface()     {}
func (this InternalErrorProblem) GetMessage() string { return this.Message }

func (InternalErrorProblem) IsTotalCountResolvingResult() {}

type Post struct {
	Content         string                 `json:"content"`
	CreatedAt       time.Time              `json:"createdAt"`
	ID              uuid.UUID              `json:"id"`
	UserID          uuid.UUID              `json:"userId"`
	Title           string                 `json:"title"`
	AllowedComments bool                   `json:"allowedComments"`
	Comments        CommentResolvingResult `json:"comments"`
}

type PostFetchFilterInput struct {
	IDAnyOf []uuid.UUID `json:"idAnyOf,omitempty"`
}

type PostFetchList struct {
	Items []*Post `json:"items"`
}

func (PostFetchList) IsPostFetchResult() {}

type PostNotFoundProblem struct {
	Message string `json:"message"`
}

func (PostNotFoundProblem) IsProblemInterface()     {}
func (this PostNotFoundProblem) GetMessage() string { return this.Message }

type PostQuery struct {
	Fetch PostFetchResult `json:"fetch"`
}

type Query struct {
}

type TotalCount struct {
	Value uint `json:"value"`
}

func (TotalCount) IsTotalCountResolvingResult() {}

type PostFetchSortEnum string

const (
	PostFetchSortEnumCreatedAtAsc  PostFetchSortEnum = "CREATED_AT_ASC"
	PostFetchSortEnumCreatedAtDesc PostFetchSortEnum = "CREATED_AT_DESC"
)

var AllPostFetchSortEnum = []PostFetchSortEnum{
	PostFetchSortEnumCreatedAtAsc,
	PostFetchSortEnumCreatedAtDesc,
}

func (e PostFetchSortEnum) IsValid() bool {
	switch e {
	case PostFetchSortEnumCreatedAtAsc, PostFetchSortEnumCreatedAtDesc:
		return true
	}
	return false
}

func (e PostFetchSortEnum) String() string {
	return string(e)
}

func (e *PostFetchSortEnum) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostFetchSortEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostFetchSortEnum", str)
	}
	return nil
}

func (e PostFetchSortEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
